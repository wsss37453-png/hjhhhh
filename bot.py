import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import json
import os
import pickle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "7573319037:AAG_AGqsmds9z212-i083AKEv-qMbaAP1OA"
SELLER_ID = 1476734998  # ID –ø—Ä–æ–¥–∞–≤—Ü–∞
RATE = 1.4  # –ö—É—Ä—Å 1 –∑–≤–µ–∑–¥–∞ = 1.4 —Ä—É–±–ª—è
MIN_STARS = 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
PAYMENT_DETAILS = """
üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*

üè¶ –ë–∞–Ω–∫: –¢–∏–Ω—å–∫–æ—Ñ—Ñ
üì± –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `2200 7001 2345 6789`
üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫/–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ!
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
ORDERS_FILE = 'orders.json'
REVIEWS_FILE = 'reviews.json'
ACTIVE_CHATS_FILE = 'active_chats.json'
USER_DATA_FILE = 'user_data.pkl'

class DataManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª—ã"""
    
    @staticmethod
    def load_data(filename, default_type=dict):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return default_type()
    
    @staticmethod
    def save_data(filename, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
            return False
    
    @staticmethod
    def load_user_data():
        """–ó–∞–≥—Ä—É–∑–∫–∞ user_data"""
        try:
            if os.path.exists(USER_DATA_FILE):
                with open(USER_DATA_FILE, 'rb') as f:
                    return pickle.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_data: {e}")
        return {}
    
    @staticmethod
    def save_user_data(user_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ user_data"""
        try:
            with open(USER_DATA_FILE, 'wb') as f:
                pickle.dump(user_data, f)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")
            return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
orders = DataManager.load_data(ORDERS_FILE)
reviews = DataManager.load_data(REVIEWS_FILE)
active_chats = DataManager.load_data(ACTIVE_CHATS_FILE)
persistent_user_data = DataManager.load_user_data()

def save_all_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    DataManager.save_data(ORDERS_FILE, orders)
    DataManager.save_data(REVIEWS_FILE, reviews)
    DataManager.save_data(ACTIVE_CHATS_FILE, active_chats)
    logger.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

async def periodic_save():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        await asyncio.sleep(60)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        save_all_data()

def get_order_by_id(order_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID"""
    if order_id in orders:
        return orders[order_id]
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ display_id
    for oid, order in orders.items():
        if order.get('order_display_id') == int(order_id):
            return order
        if str(order.get('order_display_id')) == order_id:
            return order
    
    return None

def get_order_id_by_display_id(display_id):
    """–ü–æ–ª—É—á–∏—Ç—å order_id –ø–æ display_id"""
    for order_id, order in orders.items():
        if order.get('order_display_id') == display_id:
            return order_id
    return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
def buy_stars_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
def order_creation_keyboard(order_id):
    keyboard = [
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥", callback_data=f"change_amount:{order_id}")],
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"submit_order:{order_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order:{order_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_buy_stars")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã)
def seller_payment_keyboard(order_id):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–µ–Ω—å–≥–∏ –ø—Ä–∏—à–ª–∏", callback_data=f"payment_confirmed:{order_id}")],
        [InlineKeyboardButton("‚ùå –î–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏—à–ª–∏", callback_data=f"payment_not_received:{order_id}")],
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", callback_data=f"open_chat:{order_id}")],
        [InlineKeyboardButton("üìä –ò–Ω—Ñ–æ –æ –∑–∞–∫–∞–∑–µ", callback_data=f"order_info:{order_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞
def rating_keyboard(order_id):
    keyboard = [
        [
            InlineKeyboardButton("1 ‚≠ê", callback_data=f"rate_1:{order_id}"),
            InlineKeyboardButton("2 ‚≠ê", callback_data=f"rate_2:{order_id}"),
            InlineKeyboardButton("3 ‚≠ê", callback_data=f"rate_3:{order_id}"),
            InlineKeyboardButton("4 ‚≠ê", callback_data=f"rate_4:{order_id}"),
            InlineKeyboardButton("5 ‚≠ê", callback_data=f"rate_5:{order_id}")
        ],
        [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"skip_rating:{order_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü–∞
def back_to_seller_menu_keyboard(order_id):
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"back_to_order:{order_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_data –∏–∑ persistent storage
    if str(user.id) in persistent_user_data:
        context.user_data.update(persistent_user_data[str(user.id)])
    
    welcome_text = f"""
‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥!* ‚ú®

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéâ

üåü *–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:*
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ Telegram Stars –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üí´ *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è

üöÄ *–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üõ†Ô∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*

‚ö†Ô∏è *–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥:*

üë®‚Äçüíª *–ö–æ–¥–µ—Ä –±–æ—Ç–∞:* @steddyrevival
ü§ù *–ü—Ä–æ–¥–∞–≤–µ—Ü:* @cemper0

üìû *–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º:*
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∫—É–ø–∫–æ–π –∑–≤–µ–∑–¥
‚Ä¢ –ë–∞–≥–∏ –∏ –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ

‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
    """
    
    if hasattr(update, 'callback_query'):
        await update.callback_query.edit_message_text(
            help_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            help_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
            parse_mode='Markdown'
        )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.effective_user.id
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
    if user_id == SELLER_ID:
        total_orders = len(orders)
        completed_orders = sum(1 for order in orders.values() if order.get('status') == 'completed')
        pending_orders = sum(1 for order in orders.values() if order.get('status') == 'waiting_payment')
        
        total_revenue = sum(order['stars_amount'] * RATE for order in orders.values() if order.get('status') == 'completed')
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞*

üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_orders}
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {pending_orders}

üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:.2f} —Ä—É–±.
‚≠ê –í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –ø—Ä–æ–¥–∞–Ω–æ: {sum(order['stars_amount'] for order in orders.values() if order.get('status') == 'completed')}

üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {total_revenue/completed_orders if completed_orders > 0 else 0:.2f} —Ä—É–±.
        """
        
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(stats_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(stats_text, parse_mode='Markdown')
    else:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_orders = [order for order in orders.values() if order['user_id'] == user_id]
        completed_user_orders = [order for order in user_orders if order.get('status') == 'completed']
        
        stats_text = f"""
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(user_orders)}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_user_orders)}

üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {sum(order['stars_amount'] * RATE for order in completed_user_orders):.2f} —Ä—É–±.
‚≠ê –í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –∫—É–ø–ª–µ–Ω–æ: {sum(order['stars_amount'] for order in completed_user_orders)}
        """
        
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(stats_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(stats_text, parse_mode='Markdown')

async def my_orders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_orders = [order for order_id, order in orders.items() if order['user_id'] == user_id]
    
    if not user_orders:
        await update.callback_query.edit_message_text(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!",
            reply_markup=buy_stars_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    orders_text = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
    
    for i, order in enumerate(user_orders[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
        status_emoji = {
            'creating': 'üîÑ',
            'waiting_payment': '‚è≥', 
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order.get('status', 'creating'), '‚ùì')
        
        orders_text += f"""
{i}. {status_emoji} –ó–∞–∫–∞–∑ #{order.get('order_display_id', 'N/A')}
   ‚≠ê –ó–≤–µ–∑–¥: {order['stars_amount']}
   üí∞ –°—É–º–º–∞: {order['stars_amount'] * RATE:.2f} —Ä—É–±.
   üìä –°—Ç–∞—Ç—É—Å: {order.get('status', 'creating')}
   üïê –°–æ–∑–¥–∞–Ω: {order.get('created_at', 'N/A')}
"""
    
    await update.callback_query.edit_message_text(
        orders_text,
        reply_markup=buy_stars_keyboard(),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_data –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        persistent_user_data[str(user_id)] = dict(context.user_data)
        DataManager.save_user_data(persistent_user_data)
        
        if data == "help":
            await help_command(query, context)
        elif data == "buy_stars":
            await buy_stars_menu(query, context)
        elif data == "create_order":
            await create_order(query, context)
        elif data == "back_to_main":
            await back_to_main(query, context)
        elif data == "back_to_buy_stars":
            await buy_stars_menu(query, context)
        elif data == "stats":
            await stats_command(update, context)
        elif data == "my_orders":
            await my_orders_command(update, context)
        elif data.startswith("change_amount:"):
            order_id = data.split(":")[1]
            await change_amount(query, context, order_id)
        elif data.startswith("submit_order:"):
            order_id = data.split(":")[1]
            await submit_order(query, context, order_id)
        elif data.startswith("cancel_order:"):
            order_id = data.split(":")[1]
            await cancel_order(query, context, order_id)
        elif data.startswith("payment_confirmed:"):
            order_id = data.split(":")[1]
            await payment_confirmed(query, context, order_id)
        elif data.startswith("payment_not_received:"):
            order_id = data.split(":")[1]
            await payment_not_received(query, context, order_id)
        elif data.startswith("open_chat:"):
            order_id = data.split(":")[1]
            await open_chat(query, context, order_id)
        elif data.startswith("back_to_order:"):
            order_id = data.split(":")[1]
            await back_to_order(query, context, order_id)
        elif data.startswith("order_info:"):
            order_id = data.split(":")[1]
            await order_info(query, context, order_id)
        elif data.startswith("rate_"):
            rating_data = data.split(":")
            rating = int(rating_data[0].split("_")[1])
            order_id = rating_data[1]
            await handle_rating(query, context, order_id, rating)
        elif data.startswith("skip_rating:"):
            order_id = data.split(":")[1]
            await skip_rating(query, context, order_id)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        save_all_data()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
async def buy_stars_menu(query, context: ContextTypes.DEFAULT_TYPE):
    text = """
üõí *–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥*

üí´ *–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = 1.4 —Ä—É–±–ª—è
‚≠ê *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑:* 50 –∑–≤–µ–∑–¥

üí∞ *–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞:*
‚Ä¢ 50 –∑–≤–µ–∑–¥ = 70 —Ä—É–±–ª–µ–π
‚Ä¢ 100 –∑–≤–µ–∑–¥ = 140 —Ä—É–±–ª–µ–π
‚Ä¢ 500 –∑–≤–µ–∑–¥ = 700 —Ä—É–±–ª–µ–π

üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
    """
    
    await query.edit_message_text(
        text,
        reply_markup=buy_stars_keyboard(),
        parse_mode='Markdown'
    )

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(query, context: ContextTypes.DEFAULT_TYPE):
    user = query.from_user
    welcome_text = f"""
‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥!* ‚ú®

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéâ

üåü *–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:*
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ Telegram Stars –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üí´ *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è

üöÄ *–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*
    """
    
    await query.edit_message_text(
        welcome_text,
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def create_order(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    order_id = f"{user_id}_{int(datetime.now().timestamp())}"
    order_display_id = len(orders) + 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_order_id'] = order_id
    persistent_user_data[str(user_id)] = dict(context.user_data)
    DataManager.save_user_data(persistent_user_data)
    
    orders[order_id] = {
        'user_id': user_id,
        'username': query.from_user.username or "",
        'first_name': query.from_user.first_name,
        'stars_amount': MIN_STARS,
        'status': 'creating',
        'confirmed_username': None,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'order_display_id': order_display_id
    }
    
    save_all_data()
    
    cost = MIN_STARS * RATE
    text = f"""
üìã *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_display_id}*

‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {MIN_STARS}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.1f} —Ä—É–±–ª–µ–π

üí° *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è
üßÆ *–†–∞—Å—á–µ—Ç:* {MIN_STARS} √ó {RATE} = {cost:.1f} —Ä—É–±.

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ–∫—É–ø–∫–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {MIN_STARS} –∑–≤–µ–∑–¥!

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.
    """
    
    await query.edit_message_text(
        text,
        reply_markup=order_creation_keyboard(order_id),
        parse_mode='Markdown'
    )

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
async def cancel_order(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if order['user_id'] != query.from_user.id:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π order_id
    actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
    orders[actual_order_id]['status'] = 'cancelled'
    
    await query.edit_message_text(
        "‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
        reply_markup=buy_stars_keyboard(),
        parse_mode='Markdown'
    )
    save_all_data()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
async def change_amount(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['awaiting_stars_amount'] = order_id
    persistent_user_data[str(query.from_user.id)] = dict(context.user_data)
    DataManager.save_user_data(persistent_user_data)
    
    await query.edit_message_text(
        "üî¢ *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:*\n\n"
        f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MIN_STARS} –∑–≤–µ–∑–¥\n"
        "üí´ –ü—Ä–∏–º–µ—Ä: 100, 250, 500\n\n"
        f"üí∞ *–†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç:* –≤–∞—à–µ —á–∏—Å–ª–æ √ó {RATE} —Ä—É–±.",
        parse_mode='Markdown'
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async def show_order_with_updated_amount(update, context, order_id, stars_amount):
    order = get_order_by_id(order_id)
    if not order:
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π order_id
    actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
    orders[actual_order_id]['stars_amount'] = stars_amount
    cost = stars_amount * RATE
    
    text = f"""
üìã *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{orders[actual_order_id].get('order_display_id', 'N/A')}*

‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars_amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.1f} —Ä—É–±–ª–µ–π

üí° *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è
üßÆ *–†–∞—Å—á–µ—Ç:* {stars_amount} √ó {RATE} = {cost:.1f} —Ä—É–±.

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ–∫—É–ø–∫–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {MIN_STARS} –∑–≤–µ–∑–¥!

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.
    """
    
    await update.message.reply_text(
        text,
        reply_markup=order_creation_keyboard(actual_order_id),
        parse_mode='Markdown'
    )
    save_all_data()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥–∞–≤—Ü—É
async def submit_order(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if order['stars_amount'] < MIN_STARS:
        cost = order['stars_amount'] * RATE
        actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
        await query.edit_message_text(
            f"‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            f"–ü–æ–∫—É–ø–∫–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {MIN_STARS} –∑–≤–µ–∑–¥!\n"
            f"–í–∞—à –∑–∞–∫–∞–∑: {order['stars_amount']} –∑–≤–µ–∑–¥ = {cost:.1f} —Ä—É–±.\n\n"
            f"–ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥.",
            reply_markup=order_creation_keyboard(actual_order_id),
            parse_mode='Markdown'
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è username
    context.user_data['awaiting_username_confirmation'] = order_id
    persistent_user_data[str(query.from_user.id)] = dict(context.user_data)
    DataManager.save_user_data(persistent_user_data)
    
    # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å username
    await query.edit_message_text(
        "üë§ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à username:*\n\n"
        f"–ù–∞—à –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à username –∫–∞–∫: @{order['username'] if order['username'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à username –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        parse_mode='Markdown'
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ username
async def confirm_username(update, context, order_id, username_input):
    order = get_order_by_id(order_id)
    if not order:
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
        
    original_username = order['username'] or ""
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
    cleaned_input = username_input.replace('@', '').strip()
    original_cleaned = original_username.replace('@', '').strip() if original_username else ''
    
    if cleaned_input.lower() != original_cleaned.lower():
        await update.message.reply_text(
            f"‚ùå *Username –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!*\n\n"
            f"–ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–ª: @{original_username if original_username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–í—ã –≤–≤–µ–ª–∏: @{cleaned_input}\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:",
            parse_mode='Markdown'
        )
        return False
    else:
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π order_id
        actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
        orders[actual_order_id]['confirmed_username'] = cleaned_input
        orders[actual_order_id]['status'] = 'waiting_payment'
        
        cost = order['stars_amount'] * RATE
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        user_text = f"""
‚úÖ *–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!* üéâ

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.get('order_display_id', 'N/A')}:*
‚≠ê –ó–≤–µ–∑–¥: {order['stars_amount']}
üí∞ –°—É–º–º–∞: {cost:.1f} —Ä—É–±.
üë§ –í–∞—à username: @{cleaned_input}

{PAYMENT_DETAILS}

üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* 
–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.

‚è≥ *–°—Ç–∞—Ç—É—Å:* –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        """
        
        await update.message.reply_text(
            user_text,
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        seller_text = f"""
üéØ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É!* üéØ

üÜî *–ó–∞–∫–∞–∑ #*{order.get('order_display_id', 'N/A')}
üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']}
üìõ *Username:* @{cleaned_input}
üÜî *ID:* {order['user_id']}

‚≠ê *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:* {order['stars_amount']}
üí∞ *–°—É–º–º–∞:* {cost:.1f} —Ä—É–±–ª–µ–π

üßÆ *–†–∞—Å—á–µ—Ç:* {order['stars_amount']} √ó {RATE} = {cost:.1f} —Ä—É–±.

‚è∞ *–í—Ä–µ–º—è:* {update.message.date}
        """
        
        try:
            await context.bot.send_message(
                chat_id=SELLER_ID,
                text=seller_text,
                reply_markup=seller_payment_keyboard(actual_order_id),
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É {SELLER_ID} –æ –∑–∞–∫–∞–∑–µ {actual_order_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é.*",
                parse_mode='Markdown'
            )
        
        save_all_data()
        return True

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
async def order_info(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    cost = order['stars_amount'] * RATE
    actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
    
    info_text = f"""
üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.get('order_display_id', 'N/A')}*

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']}
üìõ *Username:* @{order['confirmed_username']}
üÜî *ID:* {order['user_id']}

‚≠ê *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:* {order['stars_amount']}
üí∞ *–°—É–º–º–∞:* {cost:.1f} —Ä—É–±.

üìä *–°—Ç–∞—Ç—É—Å:* {order['status']}
üïê *–°–æ–∑–¥–∞–Ω:* {order.get('created_at', 'N/A')}

üí¨ *–î–µ–π—Å—Ç–≤–∏—è:*
    """
    
    await query.edit_message_text(
        info_text,
        reply_markup=seller_payment_keyboard(actual_order_id),
        parse_mode='Markdown'
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–º
async def payment_confirmed(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π order_id
    actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
    orders[actual_order_id]['status'] = 'completed'
    orders[actual_order_id]['completed_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    user_text = f"""
üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚úÖ

ü§ù *–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!*

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.get('order_display_id', 'N/A')}:*
‚≠ê –ó–≤–µ–∑–¥: {order['stars_amount']}
üí∞ –°—É–º–º–∞: {order['stars_amount'] * RATE:.1f} —Ä—É–±.

üí´ *–û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç!*

‚≠ê *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É:*
    """
    
    try:
        await context.bot.send_message(
            chat_id=order['user_id'],
            text=user_text,
            reply_markup=rating_keyboard(actual_order_id),
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
        await query.edit_message_text(
            f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{order['confirmed_username']} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.",
            parse_mode='Markdown'
        )
        
        logger.info(f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {actual_order_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {e}")
        await query.edit_message_text(
            f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:* {e}",
            parse_mode='Markdown'
        )
    
    save_all_data()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏
async def handle_rating(query, context: ContextTypes.DEFAULT_TYPE, order_id, rating):
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π order_id
    actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    orders[actual_order_id]['rating'] = rating
    
    await query.edit_message_text(
        f"‚≠ê *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} –∑–≤–µ–∑–¥!*\n\n"
        f"üìù *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:*\n\n"
        f"üí¨ –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ user_data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞
    context.user_data['awaiting_review'] = actual_order_id
    persistent_user_data[str(query.from_user.id)] = dict(context.user_data)
    DataManager.save_user_data(persistent_user_data)
    
    save_all_data()

# –ü—Ä–æ–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏
async def skip_rating(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π order_id
    actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
    
    await query.edit_message_text(
        "üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!*\n\n"
        "‚ú® *–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è –∏ –∂–¥–µ–º —Å–Ω–æ–≤–∞!*",
        parse_mode='Markdown'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if actual_order_id in orders:
        del orders[actual_order_id]
        save_all_data()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
async def handle_review(update, context, order_id, review_text):
    try:
        order = get_order_by_id(order_id)
        if not order:
            await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π order_id
        actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        reviews[actual_order_id] = {
            'user_id': order['user_id'],
            'username': order['confirmed_username'],
            'rating': order.get('rating', 0),
            'review': review_text,
            'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        DataManager.save_data(REVIEWS_FILE, reviews)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –ø—Ä–æ–¥–∞–≤—Ü—É
        review_message = f"""
üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!*

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']}
üìõ *Username:* @{order['confirmed_username']}
‚≠ê *–û—Ü–µ–Ω–∫–∞:* {order.get('rating', 0)} ‚≠ê

üí¨ *–û—Ç–∑—ã–≤:*
{review_text}

üÜî *ID –∑–∞–∫–∞–∑–∞:* {actual_order_id}
üë§ *ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:* {order['user_id']}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –ø—Ä–æ–¥–∞–≤—Ü—É
        try:
            await context.bot.send_message(
                chat_id=SELLER_ID,
                text=review_message,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

        await update.message.reply_text(
            "üìù *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!*\n\n"
            "üí´ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!\n"
            "‚ú® –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!",
            reply_markup=main_menu_keyboard(),
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if actual_order_id in orders:
            del orders[actual_order_id]
            save_all_data()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.",
            reply_markup=main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_data –∏–∑ persistent storage
    if str(user_id) in persistent_user_data:
        context.user_data.update(persistent_user_data[str(user_id)])
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
        if 'awaiting_stars_amount' in context.user_data:
            order_id = context.user_data['awaiting_stars_amount']
            
            try:
                stars_amount = int(message_text)
                if stars_amount < MIN_STARS:
                    await update.message.reply_text(
                        f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {MIN_STARS}\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ {MIN_STARS}:"
                    )
                    return
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del context.user_data['awaiting_stars_amount']
                persistent_user_data[str(user_id)] = dict(context.user_data)
                DataManager.save_user_data(persistent_user_data)
                
                await show_order_with_updated_amount(update, context, order_id, stars_amount)
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:\n"
                    "–ü—Ä–∏–º–µ—Ä: 100, 250, 500"
                )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è username
        elif 'awaiting_username_confirmation' in context.user_data:
            order_id = context.user_data['awaiting_username_confirmation']
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            del context.user_data['awaiting_username_confirmation']
            persistent_user_data[str(user_id)] = dict(context.user_data)
            DataManager.save_user_data(persistent_user_data)
            
            success = await confirm_username(update, context, order_id, message_text)
            if success:
                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è username, –∂–¥–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
                context.user_data['awaiting_payment_screenshot'] = order_id
                persistent_user_data[str(user_id)] = dict(context.user_data)
                DataManager.save_user_data(persistent_user_data)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
        elif 'awaiting_review' in context.user_data:
            order_id = context.user_data['awaiting_review']
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del context.user_data['awaiting_review']
            persistent_user_data[str(user_id)] = dict(context.user_data)
            DataManager.save_user_data(persistent_user_data)
            
            await handle_review(update, context, order_id, message_text)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
        elif 'awaiting_payment_screenshot' in context.user_data:
            order_id = context.user_data['awaiting_payment_screenshot']
            order = get_order_by_id(order_id)
            
            if order and update.message.photo:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–¥–∞–≤—Ü—É
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
                    screenshot_notification = f"""
üì∏ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã!*

üÜî *–ó–∞–∫–∞–∑ #*{order.get('order_display_id', 'N/A')}
üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']} (@{order['confirmed_username']})

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:* {message_text if message_text else '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}
                    """
                    
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ–¥–∞–≤—Ü—É
                    await context.bot.send_photo(
                        chat_id=SELLER_ID,
                        photo=update.message.photo[-1].file_id,
                        caption=screenshot_notification,
                        parse_mode='Markdown',
                        reply_markup=seller_payment_keyboard(order_id)
                    )
                    
                    await update.message.reply_text(
                        "‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É!*\n\n"
                        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
                        "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç.",
                        parse_mode='Markdown'
                    )
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    del context.user_data['awaiting_payment_screenshot']
                    persistent_user_data[str(user_id)] = dict(context.user_data)
                    DataManager.save_user_data(persistent_user_data)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
                    await update.message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–¥–∞–≤—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é."
                    )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö
        elif str(user_id) in active_chats:
            target_user_id = active_chats[str(user_id)]
            try:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if update.message.text:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {'–ø—Ä–æ–¥–∞–≤—Ü–∞' if user_id == SELLER_ID else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'}:*\n\n{message_text}",
                        parse_mode='Markdown'
                    )
                    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                elif update.message.photo:
                    await context.bot.send_photo(
                        chat_id=target_user_id,
                        photo=update.message.photo[-1].file_id,
                        caption=f"üì∏ *–§–æ—Ç–æ –æ—Ç {'–ø—Ä–æ–¥–∞–≤—Ü–∞' if user_id == SELLER_ID else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'}:*\n\n{message_text}" if message_text else f"üì∏ –§–æ—Ç–æ –æ—Ç {'–ø—Ä–æ–¥–∞–≤—Ü–∞' if user_id == SELLER_ID else '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'}",
                        parse_mode='Markdown'
                    )
                    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu_keyboard()
        )

# –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞)
async def open_chat(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if query.from_user.id != SELLER_ID:
        await query.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞!", show_alert=True)
        return
    
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user_id = order['user_id']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    active_chats[str(SELLER_ID)] = user_id
    active_chats[str(user_id)] = SELLER_ID
    
    DataManager.save_data(ACTIVE_CHATS_FILE, active_chats)
    
    await query.edit_message_text(
        f"üí¨ *–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º:*\n\n"
        f"üë§ {order['first_name']} (@{order['confirmed_username']})\n"
        f"üÜî ID: {user_id}\n\n"
        f"üìã *–ó–∞–∫–∞–∑ #*{order.get('order_display_id', 'N/A')}\n"
        f"‚≠ê –ó–≤–µ–∑–¥: {order['stars_amount']}\n\n"
        f"‚úâÔ∏è *–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.*\n"
        f"‚ùå *–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /close_chat*",
        parse_mode='Markdown'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üí¨ *–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫—Ä—ã–ª —á–∞—Ç —Å –≤–∞–º–∏!*\n\n"
                 f"‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é.\n"
                 f"‚ùå –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /close_chat",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
async def close_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if str(user_id) in active_chats:
        target_user_id = active_chats[str(user_id)]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        del active_chats[str(user_id)]
        if str(target_user_id) in active_chats:
            del active_chats[str(target_user_id)]
        
        DataManager.save_data(ACTIVE_CHATS_FILE, active_chats)
        
        await update.message.reply_text("‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text="‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞: {e}")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

# –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–∫–∞–∑—É (–¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞)
async def back_to_order(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if query.from_user.id != SELLER_ID:
        await query.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞!", show_alert=True)
        return
    
    order = get_order_by_id(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    cost = order['stars_amount'] * RATE
    actual_order_id = get_order_id_by_display_id(order['order_display_id']) or order_id
    
    order_text = f"""
üéØ *–ó–∞–∫–∞–∑ #{order.get('order_display_id', 'N/A')}*

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']}
üìõ *Username:* @{order['confirmed_username']}
üÜî *ID:* {order['user_id']}

‚≠ê *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:* {order['stars_amount']}
üí∞ *–°—É–º–º–∞:* {cost:.1f} —Ä—É–±–ª–µ–π

üìä *–°—Ç–∞—Ç—É—Å:* {order.get('status', 'unknown')}
üïê *–°–æ–∑–¥–∞–Ω:* {order.get('created_at', 'N/A')}
    """
    
    await query.edit_message_text(
        order_text,
        reply_markup=seller_payment_keyboard(actual_order_id),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    save_all_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def shutdown():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    save_all_data()
    logger.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("close_chat", close_chat))
    application.add_handler(CommandHandler("stats", stats_command))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    loop = asyncio.get_event_loop()
    loop.create_task(periodic_save())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
    
    # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    loop.run_until_complete(shutdown())

if __name__ == "__main__":
    main()
