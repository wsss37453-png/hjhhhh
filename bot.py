import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "7573319037:AAG_AGqsmds9z212-i083AKEv-qMbaAP1OA"
SELLER_ID = 1476734998  # ID –ø—Ä–æ–¥–∞–≤—Ü–∞
RATE = 1.4  # –ö—É—Ä—Å 1 –∑–≤–µ–∑–¥–∞ = 1.4 —Ä—É–±–ª—è
MIN_STARS = 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
PAYMENT_DETAILS = """
üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*

üè¶ –ë–∞–Ω–∫: –¢–∏–Ω—å–∫–æ—Ñ—Ñ
üì± –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `2200 7017 9663 9299`
üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –Æ—Å—É—Ñ –î

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫/–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ!
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤
orders = {}
reviews = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏
active_chats = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
def buy_stars_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
def order_creation_keyboard(order_id):
    keyboard = [
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥", callback_data=f"change_amount:{order_id}")],
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"submit_order:{order_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_stars")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã)
def seller_payment_keyboard(order_id):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–µ–Ω—å–≥–∏ –ø—Ä–∏—à–ª–∏", callback_data=f"payment_confirmed:{order_id}")],
        [InlineKeyboardButton("‚ùå –î–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏—à–ª–∏", callback_data=f"payment_not_received:{order_id}")],
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", callback_data=f"open_chat:{order_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–æ—Ç–∞
def rating_keyboard(order_id):
    keyboard = [
        [
            InlineKeyboardButton("1 ‚≠ê", callback_data=f"rate_1:{order_id}"),
            InlineKeyboardButton("2 ‚≠ê", callback_data=f"rate_2:{order_id}"),
            InlineKeyboardButton("3 ‚≠ê", callback_data=f"rate_3:{order_id}"),
            InlineKeyboardButton("4 ‚≠ê", callback_data=f"rate_4:{order_id}"),
            InlineKeyboardButton("5 ‚≠ê", callback_data=f"rate_5:{order_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü–∞
def back_to_seller_menu_keyboard(order_id):
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"back_to_order:{order_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = f"""
‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥!* ‚ú®

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéâ

üåü *–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:*
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ Telegram Stars –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üí´ *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è

üöÄ *–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data == "help":
        await help_command(query, context)
    elif data == "buy_stars":
        await buy_stars_menu(query, context)
    elif data == "create_order":
        await create_order(query, context)
    elif data == "back_to_main":
        await back_to_main(query, context)
    elif data.startswith("change_amount:"):
        order_id = data.split(":")[1]
        await change_amount(query, context, order_id)
    elif data.startswith("submit_order:"):
        order_id = data.split(":")[1]
        await submit_order(query, context, order_id)
    elif data.startswith("payment_confirmed:"):
        order_id = data.split(":")[1]
        await payment_confirmed(query, context, order_id)
    elif data.startswith("payment_not_received:"):
        order_id = data.split(":")[1]
        await payment_not_received(query, context, order_id)
    elif data.startswith("open_chat:"):
        order_id = data.split(":")[1]
        await open_chat(query, context, order_id)
    elif data.startswith("back_to_order:"):
        order_id = data.split(":")[1]
        await back_to_order(query, context, order_id)
    elif data.startswith("rate_"):
        rating_data = data.split(":")
        rating = int(rating_data[0].split("_")[1])
        order_id = rating_data[1]
        await handle_rating(query, context, order_id, rating)

# –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞
async def help_command(query, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üõ†Ô∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*

‚ö†Ô∏è *–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥:*

üë®‚Äçüíª *–ö–æ–¥–µ—Ä –±–æ—Ç–∞:* @steddyrevival
ü§ù *–ü—Ä–æ–¥–∞–≤–µ—Ü:* @cemper0

üìû *–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º:*
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∫—É–ø–∫–æ–π –∑–≤–µ–∑–¥
‚Ä¢ –ë–∞–≥–∏ –∏ –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ

‚è∞ *–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:* –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
    """
    
    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
        parse_mode='Markdown'
    )

# –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
async def buy_stars_menu(query, context: ContextTypes.DEFAULT_TYPE):
    text = """
üõí *–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥*

üí´ *–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = 1.4 —Ä—É–±–ª—è
‚≠ê *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑:* 50 –∑–≤–µ–∑–¥

üí∞ *–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞:*
‚Ä¢ 50 –∑–≤–µ–∑–¥ = 70 —Ä—É–±–ª–µ–π
‚Ä¢ 100 –∑–≤–µ–∑–¥ = 140 —Ä—É–±–ª–µ–π
‚Ä¢ 500 –∑–≤–µ–∑–¥ = 700 —Ä—É–±–ª–µ–π

üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
    """
    
    await query.edit_message_text(
        text,
        reply_markup=buy_stars_keyboard(),
        parse_mode='Markdown'
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def create_order(query, context: ContextTypes.DEFAULT_TYPE):
    order_id = str(query.from_user.id) + "_" + str(query.id)
    orders[order_id] = {
        'user_id': query.from_user.id,
        'username': query.from_user.username,
        'first_name': query.from_user.first_name,
        'stars_amount': MIN_STARS,
        'status': 'creating',
        'confirmed_username': None
    }
    
    cost = MIN_STARS * RATE
    text = f"""
üìã *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*

‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {MIN_STARS}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.1f} —Ä—É–±–ª–µ–π

üí° *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è
üßÆ *–†–∞—Å—á–µ—Ç:* {MIN_STARS} √ó {RATE} = {cost:.1f} —Ä—É–±.

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ–∫—É–ø–∫–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {MIN_STARS} –∑–≤–µ–∑–¥!

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.
    """
    
    await query.edit_message_text(
        text,
        reply_markup=order_creation_keyboard(order_id),
        parse_mode='Markdown'
    )

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
async def change_amount(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if order_id not in orders:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await query.edit_message_text(
        "üî¢ *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:*\n\n"
        f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MIN_STARS} –∑–≤–µ–∑–¥\n"
        "üí´ –ü—Ä–∏–º–µ—Ä: 100, 250, 500\n\n"
        f"üí∞ *–†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç:* –≤–∞—à–µ —á–∏—Å–ª–æ √ó {RATE} —Ä—É–±.",
        parse_mode='Markdown'
    )
    
    context.user_data['awaiting_stars_amount'] = order_id

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async def show_order_with_updated_amount(update, context, order_id, stars_amount):
    if order_id not in orders:
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    orders[order_id]['stars_amount'] = stars_amount
    cost = stars_amount * RATE
    
    text = f"""
üìã *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*

‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars_amount}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.1f} —Ä—É–±–ª–µ–π

üí° *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è
üßÆ *–†–∞—Å—á–µ—Ç:* {stars_amount} √ó {RATE} = {cost:.1f} —Ä—É–±.

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ–∫—É–ø–∫–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {MIN_STARS} –∑–≤–µ–∑–¥!

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.
    """
    
    await update.message.reply_text(
        text,
        reply_markup=order_creation_keyboard(order_id),
        parse_mode='Markdown'
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥–∞–≤—Ü—É
async def submit_order(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if order_id not in orders:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    order = orders[order_id]
    
    if order['stars_amount'] < MIN_STARS:
        cost = order['stars_amount'] * RATE
        await query.edit_message_text(
            f"‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            f"–ü–æ–∫—É–ø–∫–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {MIN_STARS} –∑–≤–µ–∑–¥!\n"
            f"–í–∞—à –∑–∞–∫–∞–∑: {order['stars_amount']} –∑–≤–µ–∑–¥ = {cost:.1f} —Ä—É–±.\n\n"
            f"–ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥.",
            reply_markup=order_creation_keyboard(order_id),
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å username
    await query.edit_message_text(
        "üë§ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à username:*\n\n"
        f"–ù–∞—à –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à username –∫–∞–∫: @{order['username'] if order['username'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à username –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        parse_mode='Markdown'
    )
    
    context.user_data['awaiting_username_confirmation'] = order_id

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ username
async def confirm_username(update, context, order_id, username_input):
    order = orders[order_id]
    original_username = order['username']
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
    cleaned_input = username_input.replace('@', '').strip()
    original_cleaned = original_username.replace('@', '').strip() if original_username else ''
    
    if cleaned_input.lower() != original_cleaned.lower():
        await update.message.reply_text(
            f"‚ùå *Username –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!*\n\n"
            f"–ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–ª: @{original_username if original_username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–í—ã –≤–≤–µ–ª–∏: @{cleaned_input}\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:",
            parse_mode='Markdown'
        )
        return False
    else:
        order['confirmed_username'] = cleaned_input
        order['status'] = 'waiting_payment'
        
        cost = order['stars_amount'] * RATE
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        user_text = f"""
‚úÖ *–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!* üéâ

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*
‚≠ê –ó–≤–µ–∑–¥: {order['stars_amount']}
üí∞ –°—É–º–º–∞: {cost:.1f} —Ä—É–±.
üë§ –í–∞—à username: @{cleaned_input}

{PAYMENT_DETAILS}

üì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:* 
–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.

‚è≥ *–°—Ç–∞—Ç—É—Å:* –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        """
        
        await update.message.reply_text(
            user_text,
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
        seller_text = f"""
üéØ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–∫—É–ø–∫—É!* üéØ

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']}
üìõ *Username:* @{cleaned_input}
üÜî *ID:* {order['user_id']}

‚≠ê *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:* {order['stars_amount']}
üí∞ *–°—É–º–º–∞:* {cost:.1f} —Ä—É–±–ª–µ–π

üßÆ *–†–∞—Å—á–µ—Ç:* {order['stars_amount']} √ó {RATE} = {cost:.1f} —Ä—É–±.

‚è∞ *–í—Ä–µ–º—è:* {update.message.date}
        """
        
        await context.bot.send_message(
            chat_id=SELLER_ID,
            text=seller_text,
            reply_markup=seller_payment_keyboard(order_id),
            parse_mode='Markdown'
        )
        
        return True

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–º
async def payment_confirmed(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if order_id not in orders:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    order = orders[order_id]
    order['status'] = 'completed'
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    user_text = f"""
üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚úÖ

ü§ù *–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!*

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*
‚≠ê –ó–≤–µ–∑–¥: {order['stars_amount']}
üí∞ –°—É–º–º–∞: {order['stars_amount'] * RATE:.1f} —Ä—É–±.

üí´ *–û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç!*

‚≠ê *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É:*
    """
    
    try:
        await context.bot.send_message(
            chat_id=order['user_id'],
            text=user_text,
            reply_markup=rating_keyboard(order_id),
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
        await query.edit_message_text(
            f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{order['confirmed_username']} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {e}")

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–º
async def payment_not_received(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if order_id not in orders:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    order = orders[order_id]
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    user_text = f"""
‚ùå *–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π* üòî

üí∏ *–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É.*

‚ö†Ô∏è *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –î–µ–Ω—å–≥–∏ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å—á–µ—Ç
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è

üì∏ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ.*

üîÑ –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º.
    """
    
    try:
        await context.bot.send_message(
            chat_id=order['user_id'],
            text=user_text,
            parse_mode='Markdown'
        )
        
        await query.edit_message_text(
            f"‚ùå *–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n"
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{order['confirmed_username']} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –æ–ø–ª–∞—Ç–æ–π.",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {e}")

# –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
async def open_chat(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if order_id not in orders:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    order = orders[order_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    active_chats[query.from_user.id] = {
        'customer_id': order['user_id'],
        'customer_username': order['confirmed_username'],
        'customer_name': order['first_name'],
        'order_id': order_id
    }
    
    chat_info = f"""
üí¨ *–ß–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º*

üë§ *–ò–º—è:* {order['first_name']}
üìõ *Username:* @{order['confirmed_username']}
üÜî *ID:* {order['user_id']}

‚≠ê *–ó–∞–∫–∞–∑–∞–Ω–æ –∑–≤–µ–∑–¥:* {order['stars_amount']}
üí∞ *–°—É–º–º–∞:* {order['stars_amount'] * RATE:.1f} —Ä—É–±.

üìù *–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.* 
–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    """
    
    await query.edit_message_text(
        chat_info,
        reply_markup=back_to_seller_menu_keyboard(order_id),
        parse_mode='Markdown'
    )

# –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–∫–∞–∑—É –∏–∑ —á–∞—Ç–∞
async def back_to_order(query, context: ContextTypes.DEFAULT_TYPE, order_id):
    if order_id not in orders:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    order = orders[order_id]
    
    # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    if query.from_user.id in active_chats:
        del active_chats[query.from_user.id]
    
    cost = order['stars_amount'] * RATE
    order_text = f"""
üìã *–ó–∞–∫–∞–∑ #{order_id}*

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']}
üìõ *Username:* @{order['confirmed_username']}
üÜî *ID:* {order['user_id']}

‚≠ê *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:* {order['stars_amount']}
üí∞ *–°—É–º–º–∞:* {cost:.1f} —Ä—É–±–ª–µ–π

üìä *–°—Ç–∞—Ç—É—Å:* {order['status']}
    """
    
    await query.edit_message_text(
        order_text,
        reply_markup=seller_payment_keyboard(order_id),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏
async def handle_rating(query, context: ContextTypes.DEFAULT_TYPE, order_id, rating):
    if order_id not in orders:
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    order = orders[order_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    order['rating'] = rating
    
    await query.edit_message_text(
        f"‚≠ê *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating} –∑–≤–µ–∑–¥!*\n\n"
        f"üìù *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:*\n\n"
        f"üí¨ –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ user_data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞
    context.user_data['awaiting_review'] = order_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
async def handle_review(update, context, order_id, review_text):
    try:
        if order_id not in orders:
            await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        order = orders[order_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –ø—Ä–æ–¥–∞–≤—Ü—É (–Ω–∞ SELLER_ID)
        review_message = f"""
üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!*

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {order['first_name']}
üìõ *Username:* @{order['confirmed_username']}
‚≠ê *–û—Ü–µ–Ω–∫–∞:* {order['rating']} ‚≠ê

üí¨ *–û—Ç–∑—ã–≤:*
{review_text}

üÜî *ID –∑–∞–∫–∞–∑–∞:* {order_id}
üë§ *ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:* {order['user_id']}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –ø—Ä–æ–¥–∞–≤—Ü—É
        await context.bot.send_message(
            chat_id=SELLER_ID,
            text=review_message,
            parse_mode='Markdown'
        )
        
        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        success_text = f"""
‚úÖ *–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!* üéâ

‚≠ê *–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:* {order['rating']} –∑–≤–µ–∑–¥
üí¨ *–í–∞—à –æ—Ç–∑—ã–≤:* {review_text}

üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!* 
–í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—É—á—à–µ!

‚ú® *–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è –∏ –∂–¥–µ–º —Å–Ω–æ–≤–∞!*
        """
        
        await update.message.reply_text(
            success_text,
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        if order_id in orders:
            del orders[order_id]
            
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        logging.info(f"–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É {SELLER_ID} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order['user_id']}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ *–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!* üéâ\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å!",
            parse_mode='Markdown'
        )

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(query, context: ContextTypes.DEFAULT_TYPE):
    user = query.from_user
    welcome_text = f"""
‚ú® *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!* ‚ú®

üåü *–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å:*
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ Telegram Stars –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏

üí´ *–ö—É—Ä—Å:* 1 –∑–≤–µ–∑–¥–∞ = {RATE} —Ä—É–±–ª—è

üöÄ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
    """
    
    await query.edit_message_text(
        welcome_text,
        reply_markup=main_menu_keyboard(),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    if user_id == SELLER_ID and user_id in active_chats:
        chat_info = active_chats[user_id]
        customer_id = chat_info['customer_id']
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            seller_message = f"""
üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:*

{text}

---
üíé *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø—Ä–æ–¥–∞–≤—Ü—É*
            """
            
            await context.bot.send_message(
                chat_id=customer_id,
                text=seller_message,
                parse_mode='Markdown'
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            await update.message.reply_text(
                f"‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é!*\n\n"
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{chat_info['customer_username']}\n"
                f"üí¨ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")
            await update.message.reply_text(
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.*\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.",
                parse_mode='Markdown'
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è username
    if 'awaiting_username_confirmation' in context.user_data:
        order_id = context.user_data['awaiting_username_confirmation']
        success = await confirm_username(update, context, order_id, text)
        if success:
            del context.user_data['awaiting_username_confirmation']
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
    if 'awaiting_stars_amount' in context.user_data:
        order_id = context.user_data['awaiting_stars_amount']
        
        try:
            stars_amount = int(text)
            
            if stars_amount < MIN_STARS:
                await update.message.reply_text(
                    f"‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                    f"–ü–æ–∫—É–ø–∫–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {MIN_STARS} –∑–≤–µ–∑–¥!\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ {MIN_STARS}",
                    parse_mode='Markdown'
                )
                return
            
            await show_order_with_updated_amount(update, context, order_id, stars_amount)
            del context.user_data['awaiting_stars_amount']
                
        except ValueError:
            await update.message.reply_text(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100, 250, 500)",
                parse_mode='Markdown'
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
    if 'awaiting_review' in context.user_data:
        order_id = context.user_data['awaiting_review']
        # –û—á–∏—â–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        del context.user_data['awaiting_review']
        await handle_review(update, context, order_id, text)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É)
    if update.message.photo or update.message.document:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_order = None
        current_order_id = None
        for order_id, order in orders.items():
            if order['user_id'] == user_id and order['status'] == 'waiting_payment':
                user_order = order
                current_order_id = order_id
                break
        
        if user_order and current_order_id:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –ø—Ä–æ–¥–∞–≤—Ü—É
            if update.message.photo:
                await context.bot.send_photo(
                    chat_id=SELLER_ID,
                    photo=update.message.photo[-1].file_id,
                    caption=f"üì∏ –ß–µ–∫ –æ—Ç @{user_order['confirmed_username']}\n"
                           f"‚≠ê –ó–∞–∫–∞–∑: {user_order['stars_amount']} –∑–≤–µ–∑–¥\n"
                           f"üí∞ –°—É–º–º–∞: {user_order['stars_amount'] * RATE:.1f} —Ä—É–±.",
                    reply_markup=seller_payment_keyboard(current_order_id)
                )
            elif update.message.document:
                await context.bot.send_document(
                    chat_id=SELLER_ID,
                    document=update.message.document.file_id,
                    caption=f"üìÑ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç @{user_order['confirmed_username']}\n"
                           f"‚≠ê –ó–∞–∫–∞–∑: {user_order['stars_amount']} –∑–≤–µ–∑–¥\n"
                           f"üí∞ –°—É–º–º–∞: {user_order['stars_amount'] * RATE:.1f} —Ä—É–±.",
                    reply_markup=seller_payment_keyboard(current_order_id)
                )
            
            await update.message.reply_text(
                "‚úÖ *–ß–µ–∫/–∫–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—É!*\n\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
                parse_mode='Markdown'
            )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    application.run_polling()

if __name__ == "__main__":
    main()